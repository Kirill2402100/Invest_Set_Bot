from __future__ import annotations
import os, json, time, asyncio, logging
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional

import gspread
from telegram import Update, constants, BotCommand
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    ContextTypes, PicklePersistence
)

log = logging.getLogger("marketing_bot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# =========================
# CONFIG
# =========================
ASSETS_DIR = os.getenv("ASSETS_DIR", "assets")
SHEET_ID   = os.getenv("SHEET_ID")
ADMIN_IDS  = {int(x.strip()) for x in os.getenv("ADMIN_IDS","").split(",") if x.strip().isdigit()}
BOT_TOKEN  = os.getenv("MARKETING_BOT_TOKEN")

# –ë–∞–Ω–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ¬´–∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ¬ª. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /setbank
DEFAULT_BANK_USDT = float(os.getenv("BANK_USDT", "1000"))

# –°–∫–æ–ª—å–∫–æ % –æ—Ç –º–∞—Ä–∂–∏ ‚Äî –ø–ª–∞–Ω –Ω–∞ TP (–¥–ª—è ¬´—Ä–∞–Ω–≥–æ–≤¬ª –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è).
# –ü—Ä–∏ –ø–ª–µ—á–µ 50 –∏ TP +1% –ø–æ –Ω–æ—Ç–∏–æ–Ω—É, –∫–æ–º–∏—Å—Å–∏–∏ ~0.1% * notional ‚âà ~5% –æ—Ç –º–∞—Ä–∂–∏ ‚Üí ~45% ¬´—á–∏—Å—Ç—ã–º–∏¬ª.
PLANNED_RETURN_ON_MARGIN_AT_TP = 45.0

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ Google Sheets
POLL_SEC = 5

STATE_FILE = "marketing_state.json"
WSHEET_TITLE = "BMR_DCA_Log"   # –ª–∏—Å—Ç, –∫—É–¥–∞ –ø–∏—à–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç

# =========================
# STATE (persist)
# =========================
"""
state = {
  "bank_usdt": 1000.0,
  "users": { "user_id": { "id": int, "name": str, "deposit": float,
                          "status": "active"|"pending",
                          "pending_deposit": float|None,
                          "joined_at": iso|None,
                          "chat_id": int|None } },
  "last_row_processed": 1,   # –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–∏—Å—Ç–∞
  "pnl_totals": { "total_profit_usd": float, "first_trade_ts": float|None },
  "cohorts": { "signal_id": { "users": [{"id":..,"name":..,"deposit":..}], "bank_usdt": float, "opened_at": iso } }
}
"""
def load_state() -> Dict[str, Any]:
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "bank_usdt": DEFAULT_BANK_USDT,
        "users": {},
        "last_row_processed": 1,
        "pnl_totals": { "total_profit_usd": 0.0, "first_trade_ts": None },
        "cohorts": {}
    }

def save_state(st: Dict[str, Any]) -> None:
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(st, f, ensure_ascii=False, indent=2)

# =========================
# Utils
# =========================
def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def fmt_money(x: Optional[float]) -> str:
    if x is None: return "‚Äî"
    return f"{x:.2f}"

def fmt_pct(x: Optional[float]) -> str:
    if x is None: return "‚Äî"
    return f"{x:.2f}%"

def choose_close_image(real_ret_margin_pct: float) -> str:
    # –†–∞–Ω–≥–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –¥–æ–ª–µ –æ—Ç –ø–ª–∞–Ω–æ–≤–æ–≥–æ TP —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –º–∞—Ä–∂—É
    if real_ret_margin_pct <= 0:
        return "sl.png"
    ratio = real_ret_margin_pct / PLANNED_RETURN_ON_MARGIN_AT_TP  # 1.0 = 100% –ø–ª–∞–Ω–æ–≤–æ–≥–æ
    if 0.50 <= ratio < 0.60: return "tp_50.png"
    if 0.70 <= ratio < 0.80: return "tp_70.png"
    if 0.80 <= ratio < 0.90: return "tp_80.png"
    if 0.90 <= ratio < 1.00: return "tp_90.png"
    return "tp_100.png"

def image_for_event(event: str, step_no: Optional[int]=None, retest: bool=False, ret_margin_pct: Optional[float]=None) -> str:
    if event == "OPEN":      return "open.png"
    if event == "ADD":
        idx = max(1, min(4, (step_no or 1)))  # 1..4
        return f"dca{idx}.png"
    if event == "RETEST_ADD":
        return "reserve.png"
    if event in ("TP_HIT", "MANUAL_CLOSE", "SL_HIT"):
        return choose_close_image(ret_margin_pct or 0.0) if event != "SL_HIT" else "sl.png"
    return "open.png"

def annualized(st: Dict[str, Any]) -> (float, float):
    """–í–µ—Ä–Ω—ë—Ç (A_percent, B_usd) = –≥–æ–¥–æ–≤—ã–µ –Ω–∞ –≤–µ—Å—å –±–∞–Ω–∫ –∏ –≤ $."""
    totals = st["pnl_totals"]
    bank   = st["bank_usdt"]
    if not totals["first_trade_ts"] or bank <= 0:
        return (0.0, 0.0)
    days = max(1e-9, (time.time() - float(totals["first_trade_ts"])) / 86400.0)
    a_pct = (totals["total_profit_usd"] / days * 365.0) / bank * 100.0
    b_usd = bank * a_pct / 100.0
    return (a_pct, b_usd)

async def send_picture(app: Application, chat_id: int, image_name: str, caption: str):
    path = os.path.join(ASSETS_DIR, image_name)
    try:
        with open(path, "rb") as f:
            await app.bot.send_photo(chat_id=chat_id, photo=f, caption=caption, parse_mode=constants.ParseMode.HTML)
    except FileNotFoundError:
        # –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await app.bot.send_message(chat_id=chat_id, text=caption, parse_mode=constants.ParseMode.HTML)

# =========================
# Google Sheets
# =========================
def open_sheet():
    creds = os.environ.get("GOOGLE_CREDENTIALS")
    if not creds:
        raise RuntimeError("GOOGLE_CREDENTIALS env var is not set")
    gc = gspread.service_account_from_dict(json.loads(creds))
    sh = gc.open_by_key(SHEET_ID)
    ws = sh.worksheet(WSHEET_TITLE)
    return ws

def read_new_rows(ws, start_row: int) -> (List[Dict[str, Any]], int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π_—Ä—è–¥).
    –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    """
    values = ws.get_all_values()
    if len(values) <= start_row:
        return [], start_row
    headers = values[0]
    rows = []
    for r in range(start_row, len(values)):
        row = values[r]
        if not any(row):  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            continue
        ev = {headers[i]: row[i] if i < len(row) else "" for i in range(len(headers))}
        rows.append(ev)
    return rows, len(values)

# =========================
# Event processing
# =========================
def parse_float(x: Any) -> Optional[float]:
    try:
        if x == "" or x is None: return None
        return float(x)
    except:
        return None

async def handle_event(app: Application, st: Dict[str,Any], ev: Dict[str,Any]):
    """
    –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –≤ —à–∏—Ç–µ (–∏–∑ –≤–∞—à–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞):
      Event, Signal_ID, Step_No, Cum_Margin_USDT, PNL_Realized_USDT, Entry_Price, Avg_Price, TP_Price, SL_Price, ...
    """
    etype = ev.get("Event") or ev.get("event") or ""
    signal_id = ev.get("Signal_ID") or ev.get("signal_id") or "UNKNOWN"
    step_no = int(parse_float(ev.get("Step_No")) or 0)
    cum_margin = parse_float(ev.get("Cum_Margin_USDT")) or 0.0
    pnl_usd = parse_float(ev.get("PNL_Realized_USDT"))  # —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏
    timestamp_iso = ev.get("Timestamp_UTC") or datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")

    bank = float(st["bank_usdt"])

    # ====== OPEN: –ø—Ä–∏–º–µ–Ω—è–µ–º pending, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–≥–æ—Ä—Ç—É ======
    if etype == "OPEN":
        # –ø—Ä–∏–º–µ–Ω–∏—Ç—å pending ‚Üí active
        for u in st["users"].values():
            if u.get("status") == "pending":
                if u.get("pending_deposit") is not None:
                    u["deposit"] = float(u["pending_deposit"])
                    u["pending_deposit"] = None
                u["status"] = "active"
                if not u.get("joined_at"):
                    u["joined_at"] = timestamp_iso

        cohort_users = [
            {"id": u["id"], "name": u.get("name","‚Äî"), "deposit": float(u.get("deposit",0))}
            for u in st["users"].values() if u.get("status") == "active" and u.get("deposit",0) > 0 and u.get("chat_id")
        ]
        st["cohorts"][signal_id] = {
            "users": cohort_users,
            "bank_usdt": bank,
            "opened_at": timestamp_iso
        }
        save_state(st)

        x_pct = (cum_margin / bank * 100.0) if bank > 0 else 0.0
        caption = (f"üìà <b>–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n"
                   f"–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ: <b>{fmt_pct(x_pct)}</b> –±–∞–Ω–∫–∞")
        # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏–∑ users (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–æ—Ä—Ç–µ, —ç—Ç–æ ‚Äî –ø—É–±–ª–∏—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ)
        for u in st["users"].values():
            if u.get("chat_id"):
                await send_picture(app, u["chat_id"], image_for_event("OPEN"), caption)
        return

    # ====== ADD / RETEST_ADD: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–æ–ª—é –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ ======
    if etype in ("ADD", "RETEST_ADD"):
        x_pct = (cum_margin / bank * 100.0) if bank > 0 else 0.0
        title = "‚ÜóÔ∏è –î–æ–∫—É–ø–∫–∞" if etype == "ADD" else "‚Ü©Ô∏è –†–µ—Ç–µ—Å—Ç-–¥–æ–∫—É–ø–∫–∞"
        img = image_for_event(etype, step_no=step_no, retest=(etype=="RETEST_ADD"))
        caption = (f"{title}\n–í –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å: <b>{fmt_pct(x_pct)}</b> –±–∞–Ω–∫–∞")
        # —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∫–æ–≥–æ—Ä—Ç–∞ —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏
        cohort = st["cohorts"].get(signal_id, {})
        for u in cohort.get("users", []):
            uid = u["id"]
            chat_id = st["users"].get(str(uid)) and st["users"][str(uid)].get("chat_id")
            if chat_id:
                await send_picture(app, chat_id, img, caption)
        return

    # ====== –ó–∞–∫—Ä—ã—Ç–∏–µ: TP_HIT / SL_HIT / MANUAL_CLOSE ======
    if etype in ("TP_HIT", "SL_HIT", "MANUAL_CLOSE"):
        # –æ–±–Ω–æ–≤–∏–º –∞–≥—Ä–µ–≥–∞—Ç—ã –¥–ª—è –≥–æ–¥–æ–≤—ã—Ö
        if pnl_usd is not None:
            if not st["pnl_totals"]["first_trade_ts"]:
                st["pnl_totals"]["first_trade_ts"] = time.time()
            st["pnl_totals"]["total_profit_usd"] += pnl_usd
            save_state(st)

        # ¬´–¥–æ—Ö–æ–¥ –æ—Ç –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã¬ª:
        y_pct = (pnl_usd / cum_margin * 100.0) if (pnl_usd is not None and cum_margin > 0) else 0.0
        a_pct, b_usd = annualized(st)

        img = image_for_event(etype, ret_margin_pct=y_pct)
        title = "‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TP" if etype == "TP_HIT" else ("üß∞ –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ" if etype=="MANUAL_CLOSE" else "‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ SL")
        caption = (f"{title}\n"
                   f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{fmt_pct(cum_margin / bank * 100.0 if bank>0 else 0.0)}</b> –±–∞–Ω–∫–∞\n"
                   f"–ü—Ä–æ—Ñ–∏—Ç –æ—Ç –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã: <b>{fmt_pct(y_pct)}</b>\n"
                   f"–ü—Ä–æ–≥–Ω–æ–∑ –≥–æ–¥–æ–≤—ã—Ö –Ω–∞ –±–∞–Ω–∫: <b>{fmt_pct(a_pct)}</b> (‚âà <b>${fmt_money(b_usd)}</b>)")

        cohort = st["cohorts"].get(signal_id, {})
        for u in cohort.get("users", []):
            uid = u["id"]
            chat_id = st["users"].get(str(uid)) and st["users"][str(uid)].get("chat_id")
            if chat_id:
                await send_picture(app, chat_id, img, caption)
        return

# =========================
# Poller
# =========================
async def poll_loop(app: Application):
    st = app.bot_data["state"]
    try:
        ws = open_sheet()
    except Exception as e:
        log.error(f"Sheet open error: {e}")
        return

    while True:
        try:
            start = max(1, int(st.get("last_row_processed", 1)))
            rows, last = read_new_rows(ws, start)
            if rows:
                for ev in rows:
                    await handle_event(app, st, ev)
                st["last_row_processed"] = last
                save_state(st)
            await asyncio.sleep(POLL_SEC)
        except Exception:
            log.exception("Poll error")
            await asyncio.sleep(POLL_SEC)

# =========================
# Commands
# =========================
async def post_init(app: Application):
    app.bot_data["state"] = load_state()
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("balance", "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –±–∞–ª–∞–Ω—Å"),
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ:
        BotCommand("adduser", "–ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand("setdeposit", "–ê–¥–º–∏–Ω: –∏–∑–º–µ–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç"),
        BotCommand("rename", "–ê–¥–º–∏–Ω: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand("users", "–ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("setbank", "–ê–¥–º–∏–Ω: –±–∞–Ω–∫ (–¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)"),
        BotCommand("broadcast", "–ê–¥–º–∏–Ω: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    ])
    asyncio.create_task(poll_loop(app))

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = ctx.bot_data["state"]
    uid = update.effective_user.id
    chat_id = update.effective_chat.id
    u = st["users"].get(str(uid))
    if not u:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –¥–µ–ø–æ–∑–∏—Ç/–∏–º—è –∑–∞–¥–∞—ë—Ç –∞–¥–º–∏–Ω ‚Äî –ø–æ–∫–∞ pending –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞
        st["users"][str(uid)] = {
            "id": uid, "name": update.effective_user.full_name or f"U{uid}",
            "deposit": 0.0, "status": "pending", "pending_deposit": None,
            "joined_at": None, "chat_id": chat_id
        }
    else:
        u["chat_id"] = chat_id
        if not u.get("name"):
            u["name"] = update.effective_user.full_name or f"U{uid}"
    save_state(st)
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í–∞—à –¥–µ–ø–æ–∑–∏—Ç –∏ –∏–º—è –∑–∞–¥–∞—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

async def cmd_balance(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = ctx.bot_data["state"]
    uid = update.effective_user.id
    u = st["users"].get(str(uid))
    if not u:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    bank = st["bank_usdt"]
    # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω –±–∞–Ω–∫—É: profit_per_1usd = total_profit / bank
    total = st["pnl_totals"]["total_profit_usd"]
    profit_per_1usd = (total / bank) if bank > 0 else 0.0
    user_profit = profit_per_1usd * float(u.get("deposit", 0.0))
    await update.message.reply_text(
        f"üë§ <b>{u.get('name','‚Äî')}</b>\n"
        f"–î–µ–ø–æ–∑–∏—Ç: <b>${fmt_money(u.get('deposit',0))}</b>\n"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–∞: <b>${fmt_money(user_profit)}</b>\n"
        f"–ò—Ç–æ–≥: <b>${fmt_money(float(u.get('deposit',0))+user_profit)}</b>",
        parse_mode=constants.ParseMode.HTML
    )

# ---- ADMIN ----
async def cmd_setbank(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    try:
        val = float(ctx.args[0])
        st = ctx.bot_data["state"]
        st["bank_usdt"] = val
        save_state(st)
        await update.message.reply_text(f"‚úÖ –ë–∞–Ω–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${val:.2f}")
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbank 1000")

async def cmd_adduser(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    try:
        uid = int(ctx.args[0]); name = ctx.args[1]; deposit = float(ctx.args[2])
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <id> <–∏–º—è> <–¥–µ–ø–æ–∑–∏—Ç>")
        return
    st = ctx.bot_data["state"]
    u = st["users"].get(str(uid))
    if not u:
        st["users"][str(uid)] = {
            "id": uid, "name": name, "deposit": 0.0,
            "status": "pending", "pending_deposit": deposit,
            "joined_at": None, "chat_id": None
        }
    else:
        u["name"] = name or u.get("name")
        u["pending_deposit"] = deposit
        u["status"] = "pending"
    save_state(st)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} ({uid}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω. –í—Å—Ç—É–ø–∏—Ç –≤ —Å–∏–ª—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º OPEN.")

async def cmd_setdeposit(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    try:
        uid = int(ctx.args[0]); deposit = float(ctx.args[1])
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setdeposit <id> <–¥–µ–ø–æ–∑–∏—Ç>")
        return
    st = ctx.bot_data["state"]
    u = st["users"].get(str(uid))
    if not u:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –°–Ω–∞—á–∞–ª–∞ /adduser.")
        return
    u["pending_deposit"] = deposit
    u["status"] = "pending"
    save_state(st)
    await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç ${deposit:.2f} –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º OPEN.")

async def cmd_rename(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    try:
        uid = int(ctx.args[0]); name = " ".join(ctx.args[1:])
    except:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rename <id> <–∏–º—è>")
        return
    st = ctx.bot_data["state"]
    u = st["users"].get(str(uid))
    if not u:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –°–Ω–∞—á–∞–ª–∞ /adduser.")
        return
    u["name"] = name
    save_state(st)
    await update.message.reply_text(f"‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {name}")

async def cmd_users(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    st = ctx.bot_data["state"]
    act = [u for u in st["users"].values() if u.get("status")=="active"]
    pend= [u for u in st["users"].values() if u.get("status")=="pending"]
    def line(u):
        pd = u.get("pending_deposit")
        pd_txt = f" ‚Üí pending {pd:.2f}" if pd is not None else ""
        return f"{u['id']} ‚Ä¢ {u.get('name','‚Äî')} ‚Ä¢ dep=${u.get('deposit',0):.2f}{pd_txt}"
    txt = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b>\n" + \
          ("\n".join(line(u) for u in act) if act else "‚Äî") + \
          "\n\n<b>Pending:</b>\n" + \
          ("\n".join(line(u) for u in pend) if pend else "‚Äî")
    await update.message.reply_text(txt, parse_mode=constants.ParseMode.HTML)

async def cmd_broadcast(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    st = ctx.bot_data["state"]
    msg = " ".join(ctx.args)
    if not msg:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    for u in st["users"].values():
        if u.get("chat_id"):
            try:
                await ctx.bot.send_message(chat_id=u["chat_id"], text=msg)
            except Exception:
                pass
    await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# =========================
# Main
# =========================
def main():
    if not BOT_TOKEN:
        raise RuntimeError("MARKETING_BOT_TOKEN env var is not set")
    persistence = PicklePersistence(filepath="marketing_persist")
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).persistence(persistence).build()
    app.add_handler(CommandHandler("start",    cmd_start))
    app.add_handler(CommandHandler("balance",  cmd_balance))
    app.add_handler(CommandHandler("adduser",  cmd_adduser))
    app.add_handler(CommandHandler("setdeposit", cmd_setdeposit))
    app.add_handler(CommandHandler("rename",   cmd_rename))
    app.add_handler(CommandHandler("users",    cmd_users))
    app.add_handler(CommandHandler("setbank",  cmd_setbank))
    app.add_handler(CommandHandler("broadcast", cmd_broadcast))
    log.info("STRIGI_KAPUSTU_BOT starting‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
